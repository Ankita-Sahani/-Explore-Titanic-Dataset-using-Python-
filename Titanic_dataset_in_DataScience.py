# -*- coding: utf-8 -*-
"""TITANIC DATASET .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16xBxYKpbuKo7KsXHRyECm9dAjYBINiWn

Titani data set :-https://www.kaggle.com/datasets/yasserh/titanic-dataset?resource=download
"""

import pandas as pd

df = pd.read_csv('Titanic-Dataset.csv')

df

df.head()

df.tail()

df.shape

df.info()

df.isnull().sum()

df.describe()

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

def bar_chart(feature):
    survived = df[df['Survived']==1][feature].value_counts()
    dead = df[df['Survived']==0][feature].value_counts()
    df1 = pd.DataFrame([survived,dead])
    df1.index = ['Survived','Dead']
    df1.plot(kind='bar',stacked=True,figsize=(10,5))

bar_chart('Sex')

bar_chart("Pclass")

bar_chart("SibSp")

bar_chart("Parch")

data =[df]
for dataset in [df] :
  dataset["Title"] = dataset["Name"].str.extract(" ([A-Za-z]+)\.",expand=False)

df

df["Title"].value_counts()

title_mapping = {"Mr": 0, "Miss": 1, "Mrs": 2,
                 "Master": 3, "Dr": 3, "Rev": 3, "Col": 3, "Major": 3, "Mlle": 3,"Countess": 3,
                 "Ms": 3, "Lady": 3, "Jonkheer": 3, "Don": 3, "Dona" : 3, "Mme": 3,"Capt": 3,"Sir": 3 }
for dataset in data:
    dataset['Title'] = dataset['Title'].map(title_mapping)

df.head(10)

df.head()

#delete or drop the unnessary features
df.drop("Name", axis=1, inplace=True)
df.drop("Name", axis=1, inplace=True)

df.head()

sex_mapping = {"male": 0, "female": 1}
for dataset in data:
    dataset['Sex'] = dataset['Sex'].map(sex_mapping)

# fill missing age with median age for each title (Mr, Mrs, Miss, Others)
df["Age"].fillna(df.groupby("Title")["Age"].transform("median"), inplace=True)
df["Age"].fillna(df.groupby("Title")["Age"].transform("median"), inplace=True)

df.head(30)
df.groupby("Title")["Age"].transform("median")
print(df.isnull().sum())

dataset['Age'] = dataset['Age'].astype(int)

for dataset in data:
  dataset.loc[(dataset['Age'] >= 0) & (dataset['Age'] <= 16), 'Age'] = 0
  dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1
  dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2
  dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3
  dataset.loc[ dataset['Age'] > 62, 'Age'] = 4

df.head()

Pclass1 = df[df['Pclass']==1]['Embarked'].value_counts()
Pclass2 = df[df['Pclass']==2]['Embarked'].value_counts()
Pclass3 = df[df['Pclass']==3]['Embarked'].value_counts()
df = pd.DataFrame([Pclass1, Pclass2, Pclass3])
df.index = ['1st class','2nd class', '3rd class']
df.plot(kind='bar',stacked=True, figsize=(10,5))

for dataset in data:
    dataset['Embarked'] = dataset['Embarked'].fillna('S')

embarked_mapping = {"S": 0, "C": 1, "Q": 2}
for dataset in data:
    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)

# fill missing Fare with median fare for each Pclass
# Ensure 'dataset' is your original DataFrame with the 'Fare' and 'Pclass' columns from the 'data' list
for dataset in data:
    print("Columns in current dataset:", dataset.columns) # Add this line to check columns
    if 'Fare' in dataset.columns and 'Pclass' in dataset.columns:
        dataset["Fare"].fillna(dataset.groupby("Pclass")["Fare"].transform("median"), inplace=True)
        print("Missing 'Fare' values filled.")
    else:
        print("Skipping filling 'Fare' as 'Fare' or 'Pclass' columns are missing.")

# Removed duplicate fillna line
if data: # Check if data list is not empty
    data[0].head(50) # Assuming the first item in data is the main DataFrame
else:
    print("Data list is empty.")

facet = sns.FacetGrid(data[0], hue="Survived",aspect=4)
facet.map(sns.kdeplot,'Fare',shade= True)
facet.set(xlim=(0, data[0]['Fare'].max()))
facet.add_legend()

plt.show()

for dataset in data:
    dataset['Fare'] = dataset['Fare'].astype(int)
    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0
    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1
    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2
    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3

data[0].Cabin.value_counts()

for dataset in data:
    dataset['Cabin'] = dataset['Cabin'].str[:1]

Pclass1 = data[0][data[0]['Pclass']==1]['Cabin'].value_counts()
Pclass2 = data[0][data[0]['Pclass']==2]['Cabin'].value_counts()
Pclass3 = data[0][data[0]['Pclass']==3]['Cabin'].value_counts()
df_cabin_plot = pd.DataFrame([Pclass1, Pclass2, Pclass3])
df_cabin_plot.index = ['1st class','2nd class', '3rd class']
df_cabin_plot.plot(kind='bar',stacked=True, figsize=(10,5))

data[0]["FamilySize"] = data[0]["SibSp"] + data[0]["Parch"] + 1
# Removed duplicate line

family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}
for dataset in data:
    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)

features_drop = ['Ticket', 'SibSp', 'Parch']
for dataset in data:
    dataset.drop(features_drop, axis=1, inplace=True)

# Dropping PassengerId as well
for dataset in data:
    dataset.drop(['PassengerId'], axis=1, inplace=True)

X = data[0].drop('Survived', axis=1)
y = data[0]['Survived']

X.shape, y.shape

df.head()

cabin_mapping = {"A": 0, "B": 0.4, "C": 0.8, "D": 1.2, "E": 1.6, "F": 2, "G": 2.4, "T": 2.8}
for dataset in data:
    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)

df.head()

df.drop('Cabin', axis=1, inplace=True)
df.drop('Cabin', axis=1, inplace=True)

for dataset in data:
    dataset['FamilySize'] = dataset['FamilySize'].astype(int)
df.info()

# Split data into features (X) and target (y)
X = data[0].drop('Survived', axis=1)
y = data[0]['Survived']

X.shape, y.shape

# Importing Classifier Modules
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

import numpy as np

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
k_fold = KFold(n_splits=10, shuffle=True, random_state=0)

# Fill missing 'Cabin' values in X with -1 (or another appropriate value)
X['Cabin'].fillna(-1, inplace=True)

clf = KNeighborsClassifier(n_neighbors = 13)
scoring = 'accuracy'
score = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)
print(score)

clf = DecisionTreeClassifier()
scoring = 'accuracy'
score = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)
print(score)

clf = RandomForestClassifier(n_estimators=13)
scoring = 'accuracy'
score = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)
print(score)

clf = GaussianNB()
scoring = 'accuracy'
score = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)
print(score)

clf = SVC()
scoring = 'accuracy'
score = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)
print(score)

from sklearn.model_selection import train_test_split

# Ensure 'Sex' column in data[0] is numerical
sex_mapping = {"male": 0, "female": 1}
for dataset in data:
    if 'Sex' in dataset.columns:
        dataset['Sex'] = dataset['Sex'].map(sex_mapping)

# Re-derive X and y from the potentially updated data[0]
X = data[0].drop('Survived', axis=1)
y = data[0]['Survived']

# Ensure all columns in X are numeric
X = X.apply(pd.to_numeric, errors='coerce')

# Fill any remaining NaNs in X with a placeholder value (e.g., -1)
X.fillna(-1, inplace=True)

# Perform the train-test split after preprocessing X and y
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Fit the SVC model using the preprocessed training data
clf = SVC()
clf.fit(X_train, y_train)

# Now use the preprocessed test data for making predictions
prediction = clf.predict(X_test)

print("Prediction on X_test successful.")

submission = pd.DataFrame({
        "PassengerId": X_test.index, # Using the index of X_test as a placeholder
        "Survived": prediction
    })

submission.head(20)

